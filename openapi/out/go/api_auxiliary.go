/*
 * Mythril API
 *
 * The Mythril service is currently in closed alpha. API keys are made available to selected community members (join the Mythril Discord to request one).  **Note that the interface will still undergo significant changes.**  Mythril is a security analysis tool for Ethereum smart contracts. It uses concolic analysis, taint analysis, and control flow checking to detect a variety of security vulnerabilities.  Mythril API exposes this functionality over the network.  In the future this API will integrate a number of other security analyzer tools seemlessly. 
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type AuxiliaryApiService service

/*
AuxiliaryApiService OpenAPI specification
Gets OpenAPI specification of Mythril API.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return Yaml
*/
//func (a *AuxiliaryApiService) GetOpenApiYaml(ctx context.Context) (Yaml, *http.Response, error) {
//	var (
//		localVarHttpMethod   = strings.ToUpper("Get")
//		localVarPostBody     interface{}
//		localVarFormFileName string
//		localVarFileName     string
//		localVarFileBytes    []byte
//		localVarReturnValue  Yaml
//	)
//
//	// create path and map variables
//	localVarPath := a.client.cfg.BasePath + "/openapi.yaml"
//
//	localVarHeaderParams := make(map[string]string)
//	localVarQueryParams := url.Values{}
//	localVarFormParams := url.Values{}
//
//	// to determine the Content-Type header
//	localVarHttpContentTypes := []string{}
//
//	// set Content-Type header
//	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
//	if localVarHttpContentType != "" {
//		localVarHeaderParams["Content-Type"] = localVarHttpContentType
//	}
//
//	// to determine the Accept header
//	localVarHttpHeaderAccepts := []string{"application/yaml", "application/json"}
//
//	// set Accept header
//	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
//	if localVarHttpHeaderAccept != "" {
//		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
//	}
//	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
//	if err != nil {
//		return localVarReturnValue, nil, err
//	}
//
//	localVarHttpResponse, err := a.client.callAPI(r)
//	if err != nil || localVarHttpResponse == nil {
//		return localVarReturnValue, localVarHttpResponse, err
//	}
//
//	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
//	localVarHttpResponse.Body.Close()
//	if err != nil {
//		return localVarReturnValue, localVarHttpResponse, err
//	}
//
//	if localVarHttpResponse.StatusCode < 300 {
//		// If we succeed, return the data, otherwise pass on to decode error.
//		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
//		if err == nil {
//			return localVarReturnValue, localVarHttpResponse, err
//		}
//	}
//
//	if localVarHttpResponse.StatusCode >= 300 {
//		newErr := GenericOpenAPIError{
//			body:  localVarBody,
//			error: localVarHttpResponse.Status,
//		}
//		if localVarHttpResponse.StatusCode == 200 {
//			var v Yaml
//			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
//			if err != nil {
//				newErr.error = err.Error()
//				return localVarReturnValue, localVarHttpResponse, newErr
//			}
//			newErr.model = v
//			return localVarReturnValue, localVarHttpResponse, newErr
//		}
//		if localVarHttpResponse.StatusCode == 500 {
//			var v ErrorModel
//			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
//			if err != nil {
//				newErr.error = err.Error()
//				return localVarReturnValue, localVarHttpResponse, newErr
//			}
//			newErr.model = v
//			return localVarReturnValue, localVarHttpResponse, newErr
//		}
//		return localVarReturnValue, localVarHttpResponse, newErr
//	}
//
//	return localVarReturnValue, localVarHttpResponse, nil
//}

/*
AuxiliaryApiService API version
Gets current versions of Mythril API and its core sub-modules.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return InlineResponse200
*/
func (a *AuxiliaryApiService) GetVersion(ctx context.Context) (InlineResponse200, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse200
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/version"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse200
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
